/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "SimpleObject.h"

@implementation SimpleObject

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name isAwesome: (BOOL) isAwesome size: (int) size
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __isAwesome = isAwesome;
  __isAwesome_isset = YES;
  __size = size;
  __size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"isAwesome"])
  {
    __isAwesome = [decoder decodeBoolForKey: @"isAwesome"];
    __isAwesome_isset = YES;
  }
  if ([decoder containsValueForKey: @"size"])
  {
    __size = [decoder decodeIntForKey: @"size"];
    __size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__isAwesome_isset)
  {
    [encoder encodeBool: __isAwesome forKey: @"isAwesome"];
  }
  if (__size_isset)
  {
    [encoder encodeInt: __size forKey: @"size"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (BOOL) isAwesome {
  return __isAwesome;
}

- (void) setIsAwesome: (BOOL) isAwesome {
  __isAwesome = isAwesome;
  __isAwesome_isset = YES;
}

- (BOOL) isAwesomeIsSet {
  return __isAwesome_isset;
}

- (void) unsetIsAwesome {
  __isAwesome_isset = NO;
}

- (int) size {
  return __size;
}

- (void) setSize: (int) size {
  __size = size;
  __size_isset = YES;
}

- (BOOL) sizeIsSet {
  return __size_isset;
}

- (void) unsetSize {
  __size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsAwesome: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SimpleObject"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isAwesome_isset) {
    [outProtocol writeFieldBeginWithName: @"isAwesome" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __isAwesome];
    [outProtocol writeFieldEnd];
  }
  if (__size_isset) {
    [outProtocol writeFieldBeginWithName: @"size" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SimpleObject("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",isAwesome:"];
  [ms appendFormat: @"%i", __isAwesome];
  [ms appendString: @",size:"];
  [ms appendFormat: @"%i", __size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static NSString * A_CONSTANT = @"#";

@implementation SimpleObjectConstants
+ (void) initialize {
}
+ (NSString *) A_CONSTANT{
  return A_CONSTANT;
}
@end

